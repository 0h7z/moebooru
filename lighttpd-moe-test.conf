# lighttpd configuration file
#
# use it as a base for lighttpd 1.0.0 and above
#
# $Id: lighttpd.conf,v 1.7 2004/11/03 22:26:05 weigon Exp $

############ Options you really have to take care of ####################

## modules to load
# at least mod_access and mod_accesslog should be loaded
# all other module should only be loaded if really neccesary
# - saves some time
# - saves memory
server.modules              = (
				"mod_rewrite",
				"mod_evasive",
				"mod_throttle",
				"mod_redirect",
#                               "mod_alias",
                                "mod_access",
#                               "mod_cml",
#                               "mod_trigger_b4_dl",
#                               "mod_auth",
#                               "mod_status",
                               "mod_setenv",
                               "mod_fastcgi",
#                               "mod_proxy",
                               "mod_simple_vhost",
#                               "mod_evhost",
#                               "mod_userdir",
                               "mod_cgi",
                               "mod_compress",
				"mod_deflate",
#                               "mod_ssi",
#                               "mod_usertrack",
                               "mod_expire",
#                               "mod_secdownload",
#                               "mod_rrdtool",
                                "mod_accesslog",
#				"mod_useronline"
)

#useronline.enable = 1
#useronline.online-age = 600
#useronline.active-age = 600
#useronline.max-ips = 4096
deflate.enabled = "enable"


#normal version
$HTTP["referer"] !~ "^($|http://moe.imouto.org)" {
        url.redirect               = ( "^/data/image/[0-9a-f]{2}/[0-9a-f]{2}/([0-9a-f]+)\..*$" => "http://moe.imouto.org/post/show?md5=$1" )
	url.redirect-http-status = 307
}
url.redirect               = (
	 "^/(data/image/[0-9a-f][0-9a-f]\/.*)$" => "http://sheryl.imouto.org/$1",
	 "^/(image/.*)" => "http://sheryl.imouto.org/$1",
	 "^/(sample/.*)" => "http://sheryl.imouto.org/$1"
)

#secdownload version
#$HTTP["referer"] !~ "moe.imouto.org" {
#        url.redirect               = ( "^/data/(.*)/(.*)/(.*)/(.*)/(.*)\.(jpg|gif|png)" => "http://moe.imouto.org/post/show?md5=$5" )
#}


evasive.max-conns-per-ip = 20
server.max-write-idle = 600


#secdownload.secret          = "uguuruuwasuremono"
#secdownload.document-root   = "/home/moe/danbooru/data"
#secdownload.uri-prefix      = "/data/"
#secdownload.timeout         = 2000


# No files in /data are Rails requests, and there are a constant stream of bogus requests
# in /data from broken robots.  Only redir to /dispatch.cgi for paths not in /data. 
$HTTP["url"] !~ "^/data.*" {
  server.error-handler-404 = "/dispatch.fcgi"
}
server.document-root     = "/home/moe/moe-live" + "/public/"

url.rewrite              = (
	"^/$" => "index.html",
	"^([^.]+)$" => "$1.html",

	# /image/d9cca721a735dac4efe709e0f3518373/anything.jpg -> /data/d9/cc/d9cca721a735dac4efe709e0f3518373.jpg
	# This is a simple way of setting the filename on downloaded files.
	"^/image/([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{28})(/.*)?(\.[a-z]*)" => "/data/image/$1/$2/$1$2$3$5",
	"^/sample/([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{28})(/.*)?(\.[a-z]*)" => "/data/sample/$1/$2/$1$2$3$5"
)

#$HTTP["orig-url"] =~ "^/image/.*" {
#	setenv.add-response-header = ( "Content-Disposition" => "attachment" )
#}

compress.filetype        = ( "text/plain", "text/html", "text/css", "text/javascript" )
compress.cache-dir       = "/home/moe/moe-live" + "/tmp/cache"

expire.url               = ( "/favicon.ico"  => "access 3 days", 
                             "/images/"      => "access 3 days", 
                             "/stylesheets/" => "access 3 days",
                             "/javascripts/" => "access 3 days" )

#server.network-backend = "writev"

# Change *-procs to 2 if you need to use Upload Progress or other tasks that
# *need* to execute a second request while the first is still pending.
fastcgi.server      = ( ".fcgi" => ( "danbooru" => (
  "min-procs"       => 2, 
  "max-procs"       => 2,
  "socket"          => "/home/moe/moe-live" + "/tmp/sockets/fcgi-test.socket",
  "bin-path"        => "/home/moe/moe-live" + "/public/dispatch.fcgi",
  "bin-environment" => ( "RAILS_ENV" => "production_with_logging" )
) ) )

# Making sure file uploads above 64k always work when using IE or Safari
# For more information, see http://trac.lighttpd.net/trac/ticket/360
$HTTP["useragent"] =~ "^(.*MSIE.*)|(.*AppleWebKit.*)$" {
  server.max-keep-alive-requests = 0
}


#$HTTP["referer"] !~ "^http://moe.imouto.org/.*" {
#url.access-deny = ( ".jpg", ".jpeg", ".png", ".avg", ".mpeg" )
#}


# files to check for if .../ is requested
index-file.names            = ( "index.php", "index.html",
                                "index.htm", "default.htm" )

## set the event-handler (read the performance section in the manual)
server.event-handler = "freebsd-kqueue" # needed on OS X

# mimetype mapping
mimetype.assign             = (
  ".pdf"          =>      "application/pdf",
  ".sig"          =>      "application/pgp-signature",
  ".spl"          =>      "application/futuresplash",
  ".class"        =>      "application/octet-stream",
  ".ps"           =>      "application/postscript",
  ".torrent"      =>      "application/x-bittorrent",
  ".dvi"          =>      "application/x-dvi",
  ".gz"           =>      "application/x-gzip",
  ".pac"          =>      "application/x-ns-proxy-autoconfig",
  ".swf"          =>      "application/x-shockwave-flash",
  ".tar.gz"       =>      "application/x-tgz",
  ".tgz"          =>      "application/x-tgz",
  ".tar"          =>      "application/x-tar",
  ".zip"          =>      "application/zip",
  ".mp3"          =>      "audio/mpeg",
  ".m3u"          =>      "audio/x-mpegurl",
  ".wma"          =>      "audio/x-ms-wma",
  ".wax"          =>      "audio/x-ms-wax",
  ".ogg"          =>      "application/ogg",
  ".wav"          =>      "audio/x-wav",
  ".gif"          =>      "image/gif",
  ".jpg"          =>      "image/jpeg",
  ".jpeg"         =>      "image/jpeg",
  ".png"          =>      "image/png",
  ".xbm"          =>      "image/x-xbitmap",
  ".xpm"          =>      "image/x-xpixmap",
  ".xwd"          =>      "image/x-xwindowdump",
  ".css"          =>      "text/css",
  ".xhtml"         =>      "text/html",
  ".html"         =>      "text/html",
  ".htm"          =>      "text/html",
  ".js"           =>      "text/javascript",
  ".asc"          =>      "text/plain",
  ".c"            =>      "text/plain",
  ".cpp"          =>      "text/plain",
  ".log"          =>      "text/plain",
  ".conf"         =>      "text/plain",
  ".text"         =>      "text/plain",
  ".txt"          =>      "text/plain",
  ".dtd"          =>      "text/xml",
  ".xml"          =>      "text/xml",
  ".xsl"          =>      "text/xml",	 
  ".mpeg"         =>      "video/mpeg",
  ".mpg"          =>      "video/mpeg",
  ".mov"          =>      "video/quicktime",
  ".qt"           =>      "video/quicktime",
  ".avi"          =>      "video/x-msvideo",
  ".asf"          =>      "video/x-ms-asf",
  ".asx"          =>      "video/x-ms-asf",
  ".wmv"          =>      "video/x-ms-wmv",
  ".bz2"          =>      "application/x-bzip",
  ".tbz"          =>      "application/x-bzip-compressed-tar",
  ".tar.bz2"      =>      "application/x-bzip-compressed-tar"
 )

# Use the "Content-Type" extended attribute to obtain mime type if possible
#mimetype.use-xattr        = "enable"


## send a different Server: header
## be nice and keep it at lighttpd
# server.tag                 = "lighttpd"

#### accesslog module
accesslog.filename          = "/var/log/lighttpd/access-moe-test.log"

## deny access the file-extensions
#
# ~    is for backupfiles from vi, emacs, joe, ...
# .inc is often used for code includes which should in general not be part
#      of the document-root
url.access-deny             = ( "~", ".inc" )

$HTTP["url"] =~ "\.pdf$" {
  server.range-requests = "disable"
}

##
# which extensions should not be handle via static-file transfer
#
# .php, .pl, .fcgi are most often handled by mod_fastcgi or mod_cgi
static-file.exclude-extensions = ( ".php", ".pl", ".fcgi" )

######### Options that are good to be but not neccesary to be changed #######

## bind to port (default: 80)
#server.port                = 81
server.port                = 85

#$SERVER["socket"] == "67.159.5.233:8080" {
#}

## bind to localhost (default: all interfaces)
server.bind                = "76.73.1.90"

## error-handler for status 404
#server.error-handler-404   = "/error-handler.html"
#server.error-handler-404   = "/error-handler.php"

## to help the rc.scripts
server.pid-file            = "/var/run/lighttpd-moe-test.pid"


###### virtual hosts
##
##  If you want name-based virtual hosting add the next three settings and load
##  mod_simple_vhost
##
## document-root =
##   virtual-server-root + virtual-server-default-host + virtual-server-docroot
## or
##   virtual-server-root + http-host + virtual-server-docroot
##

##
## Format: <errorfile-prefix><status-code>.html
## -> ..../status-404.html for 'File not found'
#server.errorfile-prefix    = "/home/weigon/projects/lighttpd/doc/status-"

## virtual directory listings
dir-listing.activate       = "disable"

## enable debugging
#debug.log-request-header   = "enable"
#debug.log-response-header  = "enable"
#debug.log-request-handling = "enable"
#debug.log-file-not-found   = "enable"
#fastcgi.debug = 3

### only root can use these options
#
# chroot() to directory (default: no chroot() )
#server.chroot              = "/"

## change uid to <uid> (default: don't care)
server.username            = "moe"

## change uid to <uid> (default: don't care)
server.groupname           = "www"

#### compress module
#compress.cache-dir         = "/tmp/lighttpd/cache/compress/"
#compress.filetype          = ("text/plain", "text/html")

#### proxy module
## read proxy.txt for more info
#proxy.server               = ( ".php" =>
#                               ( "localhost" =>
#                                 (
#                                   "host" => "192.168.0.101",
#                                   "port" => 80
#                                 )
#                               )
#                             )

#### SSL engine
#ssl.engine                 = "enable"
#ssl.pemfile                = "server.pem"

#### status module
#status.status-url          = "/server-status"
#status.config-url          = "/server-config"

#### auth module
## read authentication.txt for more info
#auth.backend               = "plain"
#auth.backend.plain.userfile = "lighttpd.user"
#auth.backend.plain.groupfile = "lighttpd.group"

#auth.backend.ldap.hostname = "localhost"
#auth.backend.ldap.base-dn  = "dc=my-domain,dc=com"
#auth.backend.ldap.filter   = "(uid=$)"

#auth.require               = ( "/server-status" =>
#                               (
#                                 "method"  => "digest",
#                                 "realm"   => "download archiv",
#                                 "require" => "user=jan"
#                               ),
#                               "/server-config" =>
#                               (
#                                 "method"  => "digest",
#                                 "realm"   => "download archiv",
#                                 "require" => "valid-user"
#                               )
#                             )

#### url handling modules (rewrite, redirect, access)
#url.rewrite                = ( "^/$"             => "/server-status" )
#url.redirect               = ( "^/wishlist/(.+)" => "http://www.123.org/$1" )
#### both rewrite/redirect support back reference to regex conditional using %n
#$HTTP["host"] =~ "^www\.(.*)" {
#  url.redirect            = ( "^/(.*)" => "http://%1/$1" )
#}

#
# define a pattern for the host url finding
# %% => % sign
# %0 => domain name + tld
# %1 => tld
# %2 => domain name without tld
# %3 => subdomain 1 name
# %4 => subdomain 2 name
#
#evhost.path-pattern        = "/home/storage/dev/www/%3/htdocs/"

#### expire module
#expire.url                 = ( "/buggy/" => "access 2 hours", "/asdhas/" => "access plus 1 seconds 2 minutes")

#### ssi
#ssi.extension              = ( ".shtml" )

#### rrdtool
#rrdtool.binary             = "/usr/bin/rrdtool"
#rrdtool.db-name            = "/var/www/lighttpd.rrd"

#### setenv
#setenv.add-request-header  = ( "TRAV_ENV" => "mysql://user@host/db" )
#setenv.add-response-header = ( "X-Secret-Message" => "42" )

## for mod_trigger_b4_dl
# trigger-before-download.gdbm-filename = "/home/weigon/testbase/trigger.db"
# trigger-before-download.memcache-hosts = ( "127.0.0.1:11211" )
# trigger-before-download.trigger-url = "^/trigger/"
# trigger-before-download.download-url = "^/download/"
# trigger-before-download.deny-url = "http://127.0.0.1/index.html"
# trigger-before-download.trigger-timeout = 10

## for mod_cml
## don't forget to add index.cml to server.indexfiles
# cml.extension               = ".cml"
# cml.memcache-hosts          = ( "127.0.0.1:11211" )

#### variable usage:
## variable name without "." is auto prefixed by "var." and becomes "var.bar"
#bar = 1
#var.mystring = "foo"

## integer add
#bar += 1
## string concat, with integer cast as string, result: "www.foo1.com"
#server.name = "www." + mystring + var.bar + ".com"
## array merge
#index-file.names = (foo + ".php") + index-file.names
#index-file.names += (foo + ".php")

#### include
#include /etc/lighttpd/lighttpd-inc.conf
## same as above if you run: "lighttpd -f /etc/lighttpd/lighttpd.conf"
#include "lighttpd-inc.conf"

#### include_shell
#include_shell "echo var.a=1"
## the above is same as:
#var.a=1



server.errorlog             = "/var/log/lighttpd/error-moe-test.log"

# Don't allow more than 10 active concurrent connections from the same host.
throttle.max-concurrent-connections = 10
# Don't allow more than three Rails requests at once.
$HTTP["url"] =~ "/dispatch.fcgi" {
	throttle.max-concurrent-connections = 3
}
# Don't allow more than one post/similar request at once.
$HTTP["orig-url"] =~ "/post/similar.*" {
	throttle.max-concurrent-connections = 1
}
# Limit connections for non-preview/thumb images.
$HTTP["url"] =~ "^/data/[0-9a-f]{2}/" {
	throttle.max-concurrent-connections = 3
}
# If lots of requests are being made to pages disallowed in robots.txt, it's probably a misbehaving bot. HACK: prevent lighttpd from merging config sections
$HTTP["url"] =~ "/dispatch.fcgi|^ba29b12f" {
	$HTTP["orig-url"] =~ "(/artist/edit|/artist/update|/comment/show|/comment/create|/favorite|/pool/add_post|/pool/remove_post|/post/atom|/post/upload|/post/create|/post/destroy|/post/tag_history|/post/update|/post/similar|/note/history|/tag/edit|/tag/update|/tag/mass_edit|/wiki/edit|/wiki/update|/wiki/revert|/wiki/history|/wiki/rename|/user).*" {
		# Allow 1 connection/sec over 5 minutes
		throttle.bucket-size = 300
		throttle.tokens-per-second = 1
		throttle.ban-when-empty = 1
		throttle.ban-duration = 3600
	}
}
